Script started on Mon 09 May 2016 12:07:14 PM EDT
]0;miah@erdos:final[miah@erdos final]$ cat AbstractHangmanClient.java
/******************************************************************************
 *
 * This class contains the logic of a hangman game.
 * Since this class is a derived class of SimpleSocketClient, the main action is in its handleSession() method. Said method will contact a Hangman server, and obtain a word from the server. It will then interact with the player, until one of two things has happened:
 *
 * The player has guessed the word. In this case, the player is congratulated.
 * The player has made too many bad guesses. In this case, the player is "punished".
 * Those methods that actually interact with the player are left as abstract methods. A concrete subclass of AbstractHangmanClient can then interact with the player as it sees fit. Hence, one might have a text-based interface, a graphical interface, perhaps even an audio interface.
 *
 *********************************************************************************/


import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;

public abstract class AbstractHangmanClient extends SimpleSocketClient {
    protected static final int HANGMAN_DEFAULT_PORT = 9999; //default port for hangman
    protected static final String HANGMAN_DEFAULT_SERVER = "erdos.dsm.fordham.edu"; //Currently where the server is deployed
    protected int guessesRemaining; // guesses remaining
    protected String theWord; // current word
    protected StringBuffer wordSoFar; // the word as determined so far by the player's letter choices

    private SafeBufferedReader readBuffer; //safe buffer

    private char userGuess;
    private int wordLength; //word length
    private int wordGuessed;
    private int currentstate;

    /**
     * The constructor for the AbstractHangmanClient class.
     * @param debugging - True iff debugging output is enabled
     * @param hostName - The host on which the hangman server resides
     * @param portNumber - The port number on which the server is listening
     */
    public AbstractHangmanClient(boolean debugging, String hostName, int portNumber) {
        super(hostName, portNumber);
        this.debugOn = debugging;
        this.start();
    }
    /**
     * Obtain a guess from the user. This method is abstract, because it depends on the user interface.
     * @return an uppercase letter for a GUESS
     */
    public abstract char elicitGuess();

    /**
     * Display the current game state. This method is abstract, because it depends on the user interface.
     */
    public abstract void displayGame();

    /**
     * Congratulate the winner on her acumen. This method is abstract, because it depends on the user interface.
     */
    public abstract void congratulateWinner();

    /**
     * Player didn't guess the word; hang him. This method is abstract, because it depends on the user interface.
     */
    public abstract void punishLoser(); //odd function name?

    /**
     * Find out whether we want to play again. This method is abstract, because it depends on the user interface.
     * @return true or false, according to whether we want to play again or not.
     */
    public abstract boolean elicitPlayAgain();


    /**
     * This methods overrides the SimpleSocketClient.handleSession() method.
     * As mentioned in the introductory section, this method handles the main logic of a hangman game.
     * It uses a fairly simple finite state machine to do this.
     *
     * @throws Exception - in case anything goes wrong
     */
    public void handleSession() {
        DataInputStream dataInputStream = new DataInputStream(this.remoteInputStream);
        InputStreamReader inputStreamReader = new InputStreamReader(dataInputStream);
        this.readBuffer = new SafeBufferedReader((Reader)inputStreamReader);
        this.currentstate = 1;
        try {
            this.readBuffer.readLine();
            this.readBuffer.readLine();
            //FSA
            label : do {
                switch (this.currentstate) {
                    case 0: {
                        break;
                    }
                    case 1: {
                        this.startNewGame();
                        break;
                    }
                    case 2: {
                        this.userGuess = this.elicitGuess();
                        if (this.debugOn) {
                            System.out.println("Letter guessed: " + this.userGuess);
                        }
                        this.processGuess();
                        if (!this.debugOn) continue label;
                        System.out.println("Word so far: " + this.wordSoFar);
                        break;
                    }
                    case 3:
                    case 4: {
                        this.handleEndGame();
                        break;
                    }
                    default: {
                        System.err.println("Error: Unaccounted state = " + this.currentstate);
                        this.currentstate = 0;
                    }
                }
            } while (this.currentstate != 0);
            this.remoteOutputStream.writeBytes("BYE\n");
        }
        catch (Exception e) {
            System.err.println("HangmanClient HandleSession error: " + e);
        }
    }
    /**
     * Start a new game.
     * This involves contacting the server, finding out the length of the new word, initializing our guess for what the new word looks like, and displaying the latter.
     * @throws IOException - error if trying to start a newgame
     */
    public void startNewGame() {
        try {
            this.remoteOutputStream.writeBytes("NEW\n");
            String s = this.readBuffer.readLine();
            this.wordLength = Integer.parseInt(s.trim());
            if (this.debugOn) {
                System.out.println("StartNewGame: wordlength = " + this.wordLength);
            }
            this.wordSoFar = new StringBuffer(this.wordLength);
            for (int i = 0; i < this.wordLength; ++i) {
                this.wordSoFar.append('*');
            }
            this.guessesRemaining = 10;
            this.wordGuessed = this.wordLength;
            this.currentstate = 2;
            this.displayGame();
        }
        catch (IOException e) {
            System.err.println("HangmanClient StartNewGame error: " + e);
        }
    }
     /**
     * Handle the end of game (either a winner or a loser)
     *
     *
     */
    public void handleEndGame() {
        try {
            this.remoteOutputStream.writeBytes("QUIT\n");
            this.theWord = this.readBuffer.readLine();
            System.out.println("Game Ended!");
        }
        catch (IOException e) {
            System.err.println("HangmanClient HandleEndGame error: " + e);
        }
        if (this.currentstate == 3)
            this.congratulateWinner();
        else
            this.punishLoser();

        this.currentstate = this.elicitPlayAgain() ? 1 : 0;
    }	

    /**
     * Process a valid (A..Z) guess from the player.
     *  We send the guess to the server.
     *  The server tells us at what positions the guess matches the word.
     *  Our knowledge of the word is updated appropriately. If we have guessed the word, the player is congratulated.
     *  If there are no matches, the number of remaining guesses is decremented, and the player is punished if there are no remaining guesses.
     *  @throws IOException - if there was an error reading a guess
     *
     */

    public void processGuess() {
        try {
            this.remoteOutputStream.writeBytes("GUESS " + this.userGuess + '\n');
            boolean b = false;
            for (int i = 0; i < this.wordSoFar.length(); ++i) {
                String string = this.readBuffer.readLine();
                if (!Boolean.valueOf(string.trim()).booleanValue() || this.wordSoFar.charAt(i) != '*') continue;
                this.wordSoFar.setCharAt(i, this.userGuess);
                b = true;
                this.wordGuessed--;
            }
            if (!b) this.guessesRemaining--;
            if (this.wordGuessed == 0) this.currentstate = 3;
            else if (this.guessesRemaining == 0) this.currentstate = 4;
            else this.displayGame();
        } catch (IOException e) {
            System.err.println("HangmanClient ProcessGuess error: " + e);
        }
    }
}

]0;miah@erdos:final[miah@erdos final]$ cat TexthangmanClient.java
cat: TexthangmanClient.java: No such file or directory
]0;miah@erdos:final[miah@erdos final]$ cat Tet[KxtHangmanClient.java
/******************************************
 * Project 5: Hangman Client
 *
 * Client implemention of Hangman game. Keeps track of guesses, words guess, and guesses remaining.
 *
 * A class that implements the abstract methods of Abstract HangmanClient.
 * It provides a text-based interface, as well as a main() method, giving an executable program.
 *
 *
 * @Author: Md Naim Miah
 * @Date: 9 May 2016
 ********************************************/

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;

public class TextHangmanClient extends AbstractHangmanClient {

    private SafeBufferedReader readKeyboard = new SafeBufferedReader((Reader)new InputStreamReader(System.in));
    /**
     * The constructor for the TextHangmanClient class. Used to call constructor from AbstractHangmanClient.
     * @param debugging - True iff debugging output is enabled
     * @param serverName - The host on which the hangman server resides
     * @param portNumber - The port number on which the server is listening
     *
     */
    public TextHangmanClient(boolean debugging, String serverName, int portNumber) {
        super(debugging, serverName, portNumber); // AbstractHangmanClient constructor
    }

    /**
     * Obtain a guess from the user.
     * @return an uppercase letter for a GUESS
     */
    @Override
    public char elicitGuess() {
        char c = '0';
        try {
            String s;
            do {
                System.out.print("Letter? ");
                System.out.flush();
            } while (!Character.isLetter(c = (s = this.readKeyboard.readLine()).charAt(0)));
        }
        catch (IOException e) {
            System.err.println("TextHangmanClient ElicitGuess Error: " + e);
        }
        return Character.toUpperCase(c);
    }
    /**
     * Find out whether we want to play again.
     * @return true or false, according to whether we want to play again or not.
     */

    @Override
    public boolean elicitPlayAgain() {
        char c = '0';
        try {
            do {
                System.out.print("Another game (Y/N)? ");
                System.out.flush();
                String s = this.readKeyboard.readLine();
                c = s.charAt(0);
            } while ((c = Character.toUpperCase(c)) != 'Y' && c != 'N');
            if (c == 'N') 
                System.out.println("Game Ended!");
        }
        catch (IOException e) {
            System.err.println("TextHangmanClient ElicitPlayAgain Error: " + e);
        }
        return c == 'Y';
    }
    /**
     * Display the current game state.
     */
    @Override
    public void displayGame() {
        System.out.println("Word: " + this.wordSoFar + "\nGuesses remaining:" + this.guessesRemaining);
    }
    /**
     * Congratulate the winner on her acumen.
     */
    @Override
    public void congratulateWinner() {
        System.out.println("Word was: " + this.theWord + "\nCongratulations! You got the word!");
    }
    /**
     *Player failed to guess the word.
     */
    @Override
    public void punishLoser() {
        System.out.println("Sorry! Too many guesses! \nWord was: " + this.theWord + "\nHangman ... take a few \"practice swings\" (heh, heh)");
    }
    /**
     * Print usage message
     */
    public static void usage() {
        System.err.println("Usage: HangmanServer [-d] [-h] [server]");
        System.err.println("  -d: print debugging info");
        System.err.println("  -h: print this help msg");
    }
    /**
     * The usual main() function, which gets things rolling.
     * After parsing the command line, it invokes the constructor for this class. That's it! Optional command line parameters:
     *
     * <li>Flag -d: enable debug output</li>
     * <li>Flag -h: print help message</li>
     * <li>Name of alternate Hangman server</li>
     * <li>Any other flags (e.g., -x) will cause the help message to be printed, along with an error exit.</li>
     *
     */
    public static void main(String[] argv) {
        String hostName = "erdos.dsm.fordham.edu";
        boolean debugging = false;
        int portNumber = 9999;
        int n = 0;
        if (argv.length > 0 && argv[0].charAt(0) == '-') {
            n++;
            switch (argv[0].charAt(1)) {
                case 'h': {
                    TextHangmanClient.usage();
                    System.exit(0);
                    break;
                }
                case 'd': {
                    debugging = true;
                    break;
                }
                default: {
                    TextHangmanClient.usage();
                    System.exit(1);
                }
            }
        }
        if (argv.length > n) {
            hostName = argv[n];
        }
        new TextHangmanClient(debugging, hostName, portNumber);
    }
}

]0;miah@erdos:final[miah@erdos final]$ javac TextHangmanClient.java
]0;miah@erdos:final[miah@erdos final]$ java TextHangmanClient
Word: ******
Guesses remaining:10
Letter? e
Word: ******
Guesses remaining:9
Letter? a
Word: ******
Guesses remaining:8
Letter? b
Word: ******
Guesses remaining:7
Letter? l
Word: ******
Guesses remaining:6
Letter? p
Word: ******
Guesses remaining:5
Letter? s
Word: **S***
Guesses remaining:5
Letter? c
Word: **SC**
Guesses remaining:5
Letter? v
Word: V*SC**
Guesses remaining:5
Letter? d
Word: V*SC*D
Guesses remaining:5
Letter? u
Word: V*SC*D
Guesses remaining:4
Letter? h
Word: V*SC*D
Guesses remaining:3
Letter? f
Word: V*SC*D
Guesses remaining:2
Letter? w
Word: V*SC*D
Guesses remaining:1
Letter? v
Game Ended!
Sorry! Too many guesses! 
Word was: VISCID
Hangman ... take a few "practice swings" (heh, heh)
Another game (Y/N)? Y
Word: ***********
Guesses remaining:10
Letter? a
Word: ***********
Guesses remaining:9
Letter? s
Word: *****S***SS
Guesses remaining:9
Letter? df
Word: D****S***SS
Guesses remaining:9
Letter? g
Word: D****S***SS
Guesses remaining:8
Letter? s
Word: D****S***SS
Guesses remaining:7
Letter? v
Word: D****S***SS
Guesses remaining:6
Letter? b
Word: D*B**S***SS
Guesses remaining:6
Letter? n
Word: D*B**S*N*SS
Guesses remaining:6
Letter? j
Word: D*B**S*N*SS
Guesses remaining:5
Letter? u
Word: D*B**S*N*SS
Guesses remaining:4
Letter? g
Word: D*B**S*N*SS
Guesses remaining:3
Letter? r
Word: D*B**S*N*SS
Guesses remaining:2
Letter? t
Word: D*B**STN*SS
Guesses remaining:2
Letter? k
Word: D*B**STN*SS
Guesses remaining:1
Letter? l
Game Ended!
Sorry! Too many guesses! 
Word was: DEBOISTNESS
Hangman ... take a few "practice swings" (heh, heh)
Another game (Y/N)? Y
Word: *****
Guesses remaining:10
Letter? e
Word: *****
Guesses remaining:9
Letter? a
Word: *A***
Guesses remaining:9
Letter? b
Word: *A***
Guesses remaining:8
Letter? u
Word: *A***
Guesses remaining:7
Letter? i
Word: *A***
Guesses remaining:6
Letter? o
Word: *A***
Guesses remaining:5
Letter? l
Word: *A***
Guesses remaining:4
Letter? m
Word: *A***
Guesses remaining:3
Letter? n
Word: *AN**
Guesses remaining:3
Letter? c
Word: *AN**
Guesses remaining:2
Letter? x
Word: *AN**
Guesses remaining:1
Letter? z
Game Ended!
Sorry! Too many guesses! 
Word was: HANKT
Hangman ... take a few "practice swings" (heh, heh)
Another game (Y/N)? Y
Word: *******
Guesses remaining:10
Letter? s
Word: *******
Guesses remaining:9
Letter? d
Word: *******
Guesses remaining:8
Letter? a
Word: *A*****
Guesses remaining:8
Letter? v
Word: *A*****
Guesses remaining:7
Letter? b
Word: *A*****
Guesses remaining:6
Letter? n
Word: *A*****
Guesses remaining:5
Letter? j
Word: *A*****
Guesses remaining:4
Letter? u
Word: *A*****
Guesses remaining:3
Letter? i
Word: *A*****
Guesses remaining:2
Letter? y
Word: *A*****
Guesses remaining:1
Letter? t
Word: *A*T***
Guesses remaining:1
Letter? r
Word: *A*T*R*
Guesses remaining:1
Letter? d
Game Ended!
Sorry! Too many guesses! 
Word was: HAPTERE
Hangman ... take a few "practice swings" (heh, heh)
Another game (Y/N)? Y
Word: *******
Guesses remaining:10
Letter? a
Word: ***A***
Guesses remaining:10
Letter? e
Word: ***A***
Guesses remaining:9
Letter? b c
Word: ***AC**
Guesses remaining:9
Letter? t
Word: **TAC**
Guesses remaining:9
Letter? y
Word: **TAC**
Guesses remaining:8
Letter? o
Word: *OTAC**
Guesses remaining:8
Letter? n
Word: *OTAC**
Guesses remaining:7
Letter? m
Word: MOTAC**
Guesses remaining:7
Letter? h
Word: MOTAC**
Guesses remaining:6
Letter? g
Word: MOTAC**
Guesses remaining:5
Letter? f
Word: MOTAC**
Guesses remaining:4
Letter? d
Word: MOTAC**
Guesses remaining:3
Letter? l
Word: MOTAC*L
Guesses remaining:3
Letter? s
Word: MOTAC*L
Guesses remaining:2
Letter? p
Word: MOTAC*L
Guesses remaining:1
Letter? t
Game Ended!
Sorry! Too many guesses! 
Word was: MOTACIL
Hangman ... take a few "practice swings" (heh, heh)
Another game (Y/N)? N
Game Ended!
]0;miah@erdos:final[miah@erdos final]$ java TextHangmanClient
Word: *******
Guesses remaining:10
Letter? s
Word: *******
Guesses remaining:9
Letter? d
Word: *******
Guesses remaining:8
Letter? a
Word: *******
Guesses remaining:7
Letter? g
Word: *******
Guesses remaining:6
Letter? h
Word: *******
Guesses remaining:5
Letter? 6
Letter? 7
Letter? 8
Letter? 9
Letter? h
Word: *******
Guesses remaining:4
Letter? j
Word: *******
Guesses remaining:3
Letter? f
Word: *******
Guesses remaining:2
Letter? s
Word: *******
Guesses remaining:1
Letter? a
Game Ended!
Sorry! Too many guesses! 
Word was: WENLOCK
Hangman ... take a few "practice swings" (heh, heh)
Another game (Y/N)? c N n
Game Ended!
]0;miah@erdos:final[miah@erdos final]$ exit
exit

Script done on Mon 09 May 2016 12:13:18 PM EDT
